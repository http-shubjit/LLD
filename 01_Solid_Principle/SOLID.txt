SOLID principles are a set of five design principles that help software developers create more understandable, flexible, and maintainable code 

1. Single Responsibility Principle (SRP)
Definition: A class should have only one reason to change, meaning it should have only one responsibility.

2. Open-Closed Principle (OCP)
Definition: Software entities should be open for extension but closed for modification. This means you can add new functionality without changing existing code.

3. Liskov Substitution Principle (LSP)
Definition:A subclasses must extend the functionality of their parent class in a way that logically aligns with the behavior expected from the parent class, ensuring that any method or property defined in the parent class can be overridden or implemented by the subclass without introducing errors or unexpected behavio

4. Interface Segregation Principle (ISP)
Definition: Clients should not be forced to depend on interfaces they do not use. Itâ€™s better to have many small interfaces than a large one.

5. Dependency Inversion Principle (DIP)
Definition: High-level modules should not depend on low-level modules; both should depend on abstractions.